<?php declare(strict_types=1);

namespace gipfl\RrdGraph\Graph\Instruction;

/**
 * man rrdgraph_graph
 * ------------------
 * Depending on the context, either the value component (no suffix, valstrftime
 * or valstrfduration) or the time component (strftime) of a VDEF is printed
 * using format. It is an error to specify a vname generated by a DEF or CDEF.
 *
 * Any text in format is printed literally with one exception: The percent
 * character introduces a formatter string. This string can be: [see manpage]
 *
 * If you PRINT a VDEF value, you can also print the time associated with it by
 * appending the string :strftime to the format. Note that RRDtool uses the
 * strftime function of your OSs C library. This means that the conversion
 * specifier may vary. Check the manual page if you are uncertain. The following
 * is a list of conversion specifiers usually supported across the board.
 *
 * Formatting values interpreted as timestamps with :valstrftime is done
 * likewise.
 *
 * Synopsis
 * --------
 * PRINT:vname:format[:strftime|:valstrftime|:valstrfduration]
 */
class PrintGraphInstruction implements GraphInstructionInterface
{
    const TAG = 'PRINT';

    protected string $variableName;
    protected string $format;
    protected ?bool $strftime = null;
    protected ?bool $valstrftime = null;
    protected ?bool $valstrfduration = null;

    // TODO: [:strftime|:valstrftime|:valstrfduration]
    public function __construct(string $vName, string $format)
    {
        $this->setVariableName($vName);
        $this->setFormat($format);
    }

    /**
     * @return string
     */
    public function getVariableName(): string
    {
        return $this->variableName;
    }

    public function setVariableName(string $variableName): self
    {
        $this->variableName = $variableName;
        return $this;
    }

    public function getFormat(): string
    {
        return $this->format;
    }

    public function setFormat(string $format): self
    {
        $this->format = $format;
        return $this;
    }

    public function isStrftime(): bool
    {
        return $this->strftime === true;
    }

    public function setStrftime(?bool $strftime = true): self
    {
        $this->strftime = $strftime;
        return $this;
    }

    public function isValstrftime(): bool
    {
        return $this->valstrftime === true;
    }

    public function setValstrftime(?bool $valstrftime = true): self
    {
        $this->valstrftime = $valstrftime;
        return $this;
    }

    public function isValstrfduration(): bool
    {
        return $this->valstrfduration === true;
    }

    public function setValstrfduration(?bool $valstrfduration = true): self
    {
        $this->valstrfduration = $valstrfduration;
        return $this;
    }

    public function __toString(): string
    {
        return self::TAG
            . ':'
            . $this->getVariableName()
            . ':'
            . $this->getFormat()
            // TODO: add a list of unnamed booleans. Means that former ones must be empty::

            // NOPE: this is not correct, it is only one of those flags
            ;
    }
}
